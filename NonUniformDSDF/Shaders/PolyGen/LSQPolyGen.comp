//?#version 450

readonly layout(std430, binding = 3) buffer pseudoInverse1
{
	float pseudoInverseCurrDeg[][];
};

readonly layout(std430, binding = 4) buffer pseudoInverse2
{
	float pseudoInverseNextDeg[][];
};

readonly layout(std430, binding = 5) buffer lsqPointsBuff
{
	vec3 lsqPoints[];
};
uniform int pointCount;

float SceneSDF(vec3 p);

float evalSDFIntegral(ivec3 degs, int pointCount, vec3 intervalStarting, vec3 intervalEnding)
{
	vec3 intervalSize = intervalEnding - intervalStarting;
	float value = 0.0f;

	for (int sampleId = 0; sampleId < pointCount; sampleId)
	{
		float sampleVal = SceneSDF((lsqPoints[sampleId] * 0.5f + 0.5f) * (intervalEnding - intervalStarting) + intervalStarting);
		value += mat(i, sampleId) * sampleVal;
	}
	
	return value * intervalSize.x * intervalSize.y * intervalSize.z / 8.0f;
}