//?#include "../Math/primitives.glsl"

// Start of generated GLSL code
float SceneSDF(vec3 p)
{
	float r0 = box(p - vec3(3.4,-0.45,3.4), vec3(0.5,0.05,0.5));
	float r1 = box(p - vec3(3.4,0,3.4), vec3(0.5,0.5,0.5));
	r1 -= 0.05;//offset
	float r2 = box(p - vec3(3.4,0,3.4), vec3(0.45,1,0.45));
	r2 *= -1.f; //invert
	r1 = max(r1,r2); //intersect 1
	r0 = min(r0,r1); //union 1
	float r3 = cylinderX(p - vec3(3.4,-0.25,3.4), vec2(0.1,1.2));
	r3 *= -1.f; //invert
	r0 = max(r0,r3); //intersect 1
	float r4 = cylinderZ(p - vec3(3.4,-0.25,3.4), vec2(0.1,1.2));
	r4 *= -1.f; //invert
	r0 = max(r0,r4); //intersect 1
	float r5 = box(p - vec3(3.4,-0.45,1.7), vec3(0.5,0.05,0.5));
	float r6 = box(p - vec3(3.4,0,1.7), vec3(0.5,0.5,0.5));
	r6 -= 0.05;//offset
	float r7 = box(p - vec3(3.4,0,1.7), vec3(0.45,1,0.45));
	r7 *= -1.f; //invert
	r6 = max(r6,r7); //intersect 1
	r5 = min(r5,r6); //union 1
	float r8 = cylinderX(p - vec3(3.4,-0.25,1.7), vec2(0.1,1.2));
	r8 *= -1.f; //invert
	r5 = max(r5,r8); //intersect 1
	float r9 = cylinderZ(p - vec3(3.4,-0.25,1.7), vec2(0.1,1.2));
	r9 *= -1.f; //invert
	r5 = max(r5,r9); //intersect 1
	float r10 = box(p - vec3(3.4,-0.45,0), vec3(0.5,0.05,0.5));
	float r11 = box(p - vec3(3.4,0,0), vec3(0.5,0.5,0.5));
	r11 -= 0.05;//offset
	float r12 = box(p - vec3(3.4,0,0), vec3(0.45,1,0.45));
	r12 *= -1.f; //invert
	r11 = max(r11,r12); //intersect 1
	r10 = min(r10,r11); //union 1
	float r13 = cylinderX(p - vec3(3.4,-0.25,0), vec2(0.1,1.2));
	r13 *= -1.f; //invert
	r10 = max(r10,r13); //intersect 1
	float r14 = cylinderZ(p - vec3(3.4,-0.25,0), vec2(0.1,1.2));
	r14 *= -1.f; //invert
	r10 = max(r10,r14); //intersect 1
	float r15 = box(p - vec3(1.7,-0.45,3.4), vec3(0.5,0.05,0.5));
	float r16 = box(p - vec3(1.7,0,3.4), vec3(0.5,0.5,0.5));
	r16 -= 0.05;//offset
	float r17 = box(p - vec3(1.7,0,3.4), vec3(0.45,1,0.45));
	r17 *= -1.f; //invert
	r16 = max(r16,r17); //intersect 1
	r15 = min(r15,r16); //union 1
	float r18 = cylinderX(p - vec3(1.7,-0.25,3.4), vec2(0.1,1.2));
	r18 *= -1.f; //invert
	r15 = max(r15,r18); //intersect 1
	float r19 = cylinderZ(p - vec3(1.7,-0.25,3.4), vec2(0.1,1.2));
	r19 *= -1.f; //invert
	r15 = max(r15,r19); //intersect 1
	float r20 = box(p - vec3(1.7,-0.45,1.7), vec3(0.5,0.05,0.5));
	float r21 = box(p - vec3(1.7,0,1.7), vec3(0.5,0.5,0.5));
	r21 -= 0.05;//offset
	float r22 = box(p - vec3(1.7,0,1.7), vec3(0.45,1,0.45));
	r22 *= -1.f; //invert
	r21 = max(r21,r22); //intersect 1
	r20 = min(r20,r21); //union 1
	float r23 = cylinderX(p - vec3(1.7,-0.25,1.7), vec2(0.1,1.2));
	r23 *= -1.f; //invert
	r20 = max(r20,r23); //intersect 1
	float r24 = cylinderZ(p - vec3(1.7,-0.25,1.7), vec2(0.1,1.2));
	r24 *= -1.f; //invert
	r20 = max(r20,r24); //intersect 1
	float r25 = box(p - vec3(1.7,-0.45,0), vec3(0.5,0.05,0.5));
	float r26 = box(p - vec3(1.7,0,0), vec3(0.5,0.5,0.5));
	r26 -= 0.05;//offset
	float r27 = box(p - vec3(1.7,0,0), vec3(0.45,1,0.45));
	r27 *= -1.f; //invert
	r26 = max(r26,r27); //intersect 1
	r25 = min(r25,r26); //union 1
	float r28 = cylinderX(p - vec3(1.7,-0.25,0), vec2(0.1,1.2));
	r28 *= -1.f; //invert
	r25 = max(r25,r28); //intersect 1
	float r29 = cylinderZ(p - vec3(1.7,-0.25,0), vec2(0.1,1.2));
	r29 *= -1.f; //invert
	r25 = max(r25,r29); //intersect 1
	float r30 = box(p - vec3(0,-0.45,3.4), vec3(0.5,0.05,0.5));
	float r31 = box(p - vec3(0,0,3.4), vec3(0.5,0.5,0.5));
	r31 -= 0.05;//offset
	float r32 = box(p - vec3(0,0,3.4), vec3(0.45,1,0.45));
	r32 *= -1.f; //invert
	r31 = max(r31,r32); //intersect 1
	r30 = min(r30,r31); //union 1
	float r33 = cylinderX(p - vec3(0,-0.25,3.4), vec2(0.1,1.2));
	r33 *= -1.f; //invert
	r30 = max(r30,r33); //intersect 1
	float r34 = cylinderZ(p - vec3(0,-0.25,3.4), vec2(0.1,1.2));
	r34 *= -1.f; //invert
	r30 = max(r30,r34); //intersect 1
	float r35 = box(p - vec3(0,-0.45,1.7), vec3(0.5,0.05,0.5));
	float r36 = box(p - vec3(0,0,1.7), vec3(0.5,0.5,0.5));
	r36 -= 0.05;//offset
	float r37 = box(p - vec3(0,0,1.7), vec3(0.45,1,0.45));
	r37 *= -1.f; //invert
	r36 = max(r36,r37); //intersect 1
	r35 = min(r35,r36); //union 1
	float r38 = cylinderX(p - vec3(0,-0.25,1.7), vec2(0.1,1.2));
	r38 *= -1.f; //invert
	r35 = max(r35,r38); //intersect 1
	float r39 = cylinderZ(p - vec3(0,-0.25,1.7), vec2(0.1,1.2));
	r39 *= -1.f; //invert
	r35 = max(r35,r39); //intersect 1
	float r40 = box(p - vec3(0,-0.45,0), vec3(0.5,0.05,0.5));
	float r41 = box(p, vec3(0.5,0.5,0.5));
	r41 -= 0.05;//offset
	float r42 = box(p, vec3(0.45,1,0.45));
	r42 *= -1.f; //invert
	r41 = max(r41,r42); //intersect 1
	r40 = min(r40,r41); //union 1
	float r43 = cylinderX(p - vec3(0,-0.25,0), vec2(0.1,1.2));
	r43 *= -1.f; //invert
	r40 = max(r40,r43); //intersect 1
	float r44 = cylinderZ(p - vec3(0,-0.25,0), vec2(0.1,1.2));
	r44 *= -1.f; //invert
	r40 = max(r40,r44); //intersect 1
	float r45 = cylinderX(p - vec3(0.85,-0.25,0), vec2(0.1,0.35));
	float r46 = cylinderX(p - vec3(0.85,-0.25,0), vec2(0.09,0.7));
	r46 *= -1.f; //invert
	r45 = max(r45,r46); //intersect 1
	r40 = min(r40,r45); //union 1
	float r47 = cylinderZ(p - vec3(0,-0.25,0.85), vec2(0.1,0.35));
	float r48 = cylinderZ(p - vec3(0,-0.25,0.85), vec2(0.09,0.7));
	r48 *= -1.f; //invert
	r47 = max(r47,r48); //intersect 1
	r40 = min(r40,r47); //union 1
	r35 = min(r35,r40); //union 1
	float r49 = cylinderX(p - vec3(0.85,-0.25,1.7), vec2(0.1,0.35));
	float r50 = cylinderX(p - vec3(0.85,-0.25,1.7), vec2(0.09,0.7));
	r50 *= -1.f; //invert
	r49 = max(r49,r50); //intersect 1
	r35 = min(r35,r49); //union 1
	float r51 = cylinderZ(p - vec3(0,-0.25,2.55), vec2(0.1,0.35));
	float r52 = cylinderZ(p - vec3(0,-0.25,2.55), vec2(0.09,0.7));
	r52 *= -1.f; //invert
	r51 = max(r51,r52); //intersect 1
	r35 = min(r35,r51); //union 1
	r30 = min(r30,r35); //union 1
	float r53 = cylinderX(p - vec3(0.85,-0.25,3.4), vec2(0.1,0.35));
	float r54 = cylinderX(p - vec3(0.85,-0.25,3.4), vec2(0.09,0.7));
	r54 *= -1.f; //invert
	r53 = max(r53,r54); //intersect 1
	r30 = min(r30,r53); //union 1
	r25 = min(r25,r30); //union 1
	float r55 = cylinderX(p - vec3(2.55,-0.25,0), vec2(0.1,0.35));
	float r56 = cylinderX(p - vec3(2.55,-0.25,0), vec2(0.09,0.7));
	r56 *= -1.f; //invert
	r55 = max(r55,r56); //intersect 1
	r25 = min(r25,r55); //union 1
	float r57 = cylinderZ(p - vec3(1.7,-0.25,0.85), vec2(0.1,0.35));
	float r58 = cylinderZ(p - vec3(1.7,-0.25,0.85), vec2(0.09,0.7));
	r58 *= -1.f; //invert
	r57 = max(r57,r58); //intersect 1
	r25 = min(r25,r57); //union 1
	r20 = min(r20,r25); //union 1
	float r59 = cylinderX(p - vec3(2.55,-0.25,1.7), vec2(0.1,0.35));
	float r60 = cylinderX(p - vec3(2.55,-0.25,1.7), vec2(0.09,0.7));
	r60 *= -1.f; //invert
	r59 = max(r59,r60); //intersect 1
	r20 = min(r20,r59); //union 1
	float r61 = cylinderZ(p - vec3(1.7,-0.25,2.55), vec2(0.1,0.35));
	float r62 = cylinderZ(p - vec3(1.7,-0.25,2.55), vec2(0.09,0.7));
	r62 *= -1.f; //invert
	r61 = max(r61,r62); //intersect 1
	r20 = min(r20,r61); //union 1
	r15 = min(r15,r20); //union 1
	float r63 = cylinderX(p - vec3(2.55,-0.25,3.4), vec2(0.1,0.35));
	float r64 = cylinderX(p - vec3(2.55,-0.25,3.4), vec2(0.09,0.7));
	r64 *= -1.f; //invert
	r63 = max(r63,r64); //intersect 1
	r15 = min(r15,r63); //union 1
	r10 = min(r10,r15); //union 1
	float r65 = cylinderZ(p - vec3(3.4,-0.25,0.85), vec2(0.1,0.35));
	float r66 = cylinderZ(p - vec3(3.4,-0.25,0.85), vec2(0.09,0.7));
	r66 *= -1.f; //invert
	r65 = max(r65,r66); //intersect 1
	r10 = min(r10,r65); //union 1
	r5 = min(r5,r10); //union 1
	float r67 = cylinderZ(p - vec3(3.4,-0.25,2.55), vec2(0.1,0.35));
	float r68 = cylinderZ(p - vec3(3.4,-0.25,2.55), vec2(0.09,0.7));
	r68 *= -1.f; //invert
	r67 = max(r67,r68); //intersect 1
	r5 = min(r5,r67); //union 1
	r0 = min(r0,r5); //union 1
return r0;
}

// End of generated GLSL code

float funDist(vec3 p)
{
	return SceneSDF(p);
}